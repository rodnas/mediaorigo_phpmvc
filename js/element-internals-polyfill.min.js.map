{"version":3,"sources":["js\\element-internals-polyfill.js"],"names":["refMap","WeakMap","validityMap","hiddenInputMap","internalsMap","validationMessageMap","formsMap","shadowHostsMap","formElementsMap","refValueMap","upgradeMap","shadowRootMap","validationAnchorMap","documentFragmentMap","onSubmitMap","observerConfig$1","attributes","attributeFilter","observer","MutationObserver","mutationsList","mutation","target","constructor","isDisabled","hasAttribute","toggleAttribute","formDisabledCallback","apply","removeHiddenInputs","internals","get","forEach","hiddenInput","remove","set","createHiddenInput","ref","input","document","createElement","type","name","getAttribute","after","push","initLabels","labels","length","Array","from","label","addEventListener","focus","bind","firstLabelId","id","htmlFor","setAttribute","setFormValidity","form","hasInvalid","elements","map","element","validity","valid","filter","control","isConnected","includes","formInputCallback","event","findParentForm","formChangeCallback","formSubmitCallback","noValidate","size","reverse","node","reportValidity","stopImmediatePropagation","stopPropagation","preventDefault","call","formResetCallback","formAssociated","initForm","onsubmit","formElements","add","initSet","Set","formAssociatedCallback","setTimeout","elem","parent","parentNode","tagName","throwIfNotFormAssociated","message","ErrorType","DOMException","overrideFormMethod","returnValue","method","upgradeInternals","aom","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaCurrent","ariaDisabled","ariaExpanded","ariaHasPopup","ariaHidden","ariaKeyShortcuts","ariaLabel","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","ValidityState","this","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valueMissing","Object","seal","isValid","validityState","key","observerCallback","mutationList","mutationRecord","addedNodes","removedNodes","added","removed","has","keys","delete","disconnect","fragmentObserverCallback","observerConfig","childList","subtree","customStateMap","CustomStateSet","super","indexOf","TypeError","state","test","result","part","clear","entry","entries","ElementInternals","rootNode","getRootNode","states","closureValue","attributeName","defineProperty","value","initAom","observe","initRef","DocumentFragment","fragment","deferUpgrade","isPolyfilled","checkValidity","validityEvent","Event","bubbles","cancelable","composed","dispatchEvent","hostRoot","querySelectorAll","anchor","setFormValue","FormData","formDataValue","formDataKey","setValidity","validityChanges","validationMessage","validityChangesObj","validityObject","check","newState","reconcileValidity","shadowRoot","willValidate","disabled","window","ElementInternalsFeatureDetection","HTMLElement","attachInternals","randomName","Math","random","toString","replace","customElements","define","featureDetectionElement","every","prop","isElementInternalsSupported","attachShadowObserver","args","attachShadow","checkValidityOverride","reportValidityOverride","prototype","Error","Element","documentElement","HTMLFormElement"],"mappings":"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","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    const refMap = new WeakMap();\r\n    const validityMap = new WeakMap();\r\n    const hiddenInputMap = new WeakMap();\r\n    const internalsMap = new WeakMap();\r\n    const validationMessageMap = new WeakMap();\r\n    const formsMap = new WeakMap();\r\n    const shadowHostsMap = new WeakMap();\r\n    const formElementsMap = new WeakMap();\r\n    const refValueMap = new WeakMap();\r\n    const upgradeMap = new WeakMap();\r\n    const shadowRootMap = new WeakMap();\r\n    const validationAnchorMap = new WeakMap();\r\n    const documentFragmentMap = new WeakMap();\r\n    const onSubmitMap = new WeakMap();\r\n\r\n    const observerConfig$1 = { attributes: true, attributeFilter: ['disabled'] };\r\n    const observer = new MutationObserver((mutationsList) => {\r\n        for (const mutation of mutationsList) {\r\n            const target = mutation.target;\r\n            if (target.constructor['formAssociated']) {\r\n                const isDisabled = target.hasAttribute('disabled');\r\n                target.toggleAttribute('internals-disabled', isDisabled);\r\n                if (target.formDisabledCallback) {\r\n                    target.formDisabledCallback.apply(target, [target.hasAttribute('disabled')]);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    const removeHiddenInputs = (internals) => {\r\n        const hiddenInputs = hiddenInputMap.get(internals);\r\n        hiddenInputs.forEach(hiddenInput => {\r\n            hiddenInput.remove();\r\n        });\r\n        hiddenInputMap.set(internals, []);\r\n    };\r\n    const createHiddenInput = (ref, internals) => {\r\n        const input = document.createElement('input');\r\n        input.type = 'hidden';\r\n        input.name = ref.getAttribute('name');\r\n        ref.after(input);\r\n        hiddenInputMap.get(internals).push(input);\r\n        return input;\r\n    };\r\n    const initRef = (ref, internals) => {\r\n        hiddenInputMap.set(internals, []);\r\n        const isDisabled = ref.hasAttribute('disabled');\r\n        ref.toggleAttribute('internals-disabled', isDisabled);\r\n        observer.observe(ref, observerConfig$1);\r\n    };\r\n    const initLabels = (ref, labels) => {\r\n        if (labels.length) {\r\n            Array.from(labels).forEach(label => label.addEventListener('click', ref.focus.bind(ref)));\r\n            let firstLabelId = labels[0].id;\r\n            if (!labels[0].id) {\r\n                firstLabelId = `${labels[0].htmlFor}_Label`;\r\n                labels[0].id = firstLabelId;\r\n            }\r\n            ref.setAttribute('aria-labelledby', firstLabelId);\r\n        }\r\n    };\r\n    const setFormValidity = (form) => {\r\n        const nativeControlValidity = Array.from(form.elements)\r\n            .map((element) => element.validity.valid);\r\n        const polyfilledVaidity = Array.from(formElementsMap.get(form))\r\n            .filter(control => control.isConnected)\r\n            .map((control) => internalsMap.get(control).validity.valid);\r\n        const hasInvalid = [...nativeControlValidity, ...polyfilledVaidity].includes(false);\r\n        form.toggleAttribute('internals-invalid', hasInvalid);\r\n        form.toggleAttribute('internals-valid', !hasInvalid);\r\n    };\r\n    const formInputCallback = (event) => {\r\n        setFormValidity(findParentForm(event.target));\r\n    };\r\n    const formChangeCallback = (event) => {\r\n        setFormValidity(findParentForm(event.target));\r\n    };\r\n    const formSubmitCallback = (event) => {\r\n        const form = event.target;\r\n        const elements = formElementsMap.get(form);\r\n        if (form.noValidate) {\r\n            return;\r\n        }\r\n        if (elements.size) {\r\n            const nodes = Array.from(elements);\r\n            const validityList = nodes\r\n                .reverse()\r\n                .map(node => {\r\n                const internals = internalsMap.get(node);\r\n                return internals.reportValidity();\r\n            });\r\n            if (validityList.includes(false)) {\r\n                event.stopImmediatePropagation();\r\n                event.stopPropagation();\r\n                event.preventDefault();\r\n            }\r\n            else if (onSubmitMap.get(form)) {\r\n                const callback = onSubmitMap.get(form);\r\n                const canceled = callback.call(form, event);\r\n                if (canceled === false) {\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        }\r\n    };\r\n    const formResetCallback = (event) => {\r\n        const elements = formElementsMap.get(event.target);\r\n        if (elements && elements.size) {\r\n            elements.forEach(element => {\r\n                if (element.constructor.formAssociated && element.formResetCallback) {\r\n                    element.formResetCallback.apply(element);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    const initForm = (ref, form, internals) => {\r\n        if (form) {\r\n            if (form.onsubmit) {\r\n                onSubmitMap.set(form, form.onsubmit.bind(form));\r\n                form.onsubmit = null;\r\n            }\r\n            const formElements = formElementsMap.get(form);\r\n            if (formElements) {\r\n                formElements.add(ref);\r\n            }\r\n            else {\r\n                const initSet = new Set();\r\n                initSet.add(ref);\r\n                formElementsMap.set(form, initSet);\r\n                form.addEventListener('submit', formSubmitCallback);\r\n                form.addEventListener('reset', formResetCallback);\r\n                form.addEventListener('input', formInputCallback);\r\n                form.addEventListener('change', formChangeCallback);\r\n            }\r\n            formsMap.set(form, { ref, internals });\r\n            if (ref.constructor['formAssociated'] && ref.formAssociatedCallback) {\r\n                setTimeout(() => {\r\n                    ref.formAssociatedCallback.apply(ref, [form]);\r\n                }, 0);\r\n            }\r\n            setFormValidity(form);\r\n        }\r\n    };\r\n    const findParentForm = (elem) => {\r\n        let parent = elem.parentNode;\r\n        if (parent && parent.tagName !== 'FORM') {\r\n            parent = findParentForm(parent);\r\n        }\r\n        return parent;\r\n    };\r\n    const throwIfNotFormAssociated = (ref, message, ErrorType = DOMException) => {\r\n        if (!ref.constructor['formAssociated']) {\r\n            throw new ErrorType(message);\r\n        }\r\n    };\r\n    const overrideFormMethod = (form, returnValue, method) => {\r\n        const elements = formElementsMap.get(form);\r\n        if (elements && elements.size) {\r\n            elements.forEach(element => {\r\n                const internals = internalsMap.get(element);\r\n                const valid = internals[method]();\r\n                if (!valid) {\r\n                    returnValue = false;\r\n                }\r\n            });\r\n        }\r\n        return returnValue;\r\n    };\r\n    const upgradeInternals = (ref) => {\r\n        if (ref.constructor['formAssociated']) {\r\n            const internals = internalsMap.get(ref);\r\n            const { labels, form } = internals;\r\n            initLabels(ref, labels);\r\n            initForm(ref, form, internals);\r\n        }\r\n    };\r\n\r\n    const aom = {\r\n        ariaAtomic: 'aria-atomic',\r\n        ariaAutoComplete: 'aria-autocomplete',\r\n        ariaBusy: 'aria-busy',\r\n        ariaChecked: 'aria-checked',\r\n        ariaColCount: 'aria-colcount',\r\n        ariaColIndex: 'aria-colindex',\r\n        ariaColSpan: 'aria-colspan',\r\n        ariaCurrent: 'aria-current',\r\n        ariaDisabled: 'aria-disabled',\r\n        ariaExpanded: 'aria-expanded',\r\n        ariaHasPopup: 'aria-haspopup',\r\n        ariaHidden: 'aria-hidden',\r\n        ariaKeyShortcuts: 'aria-keyshortcuts',\r\n        ariaLabel: 'aria-label',\r\n        ariaLevel: 'aria-level',\r\n        ariaLive: 'aria-live',\r\n        ariaModal: 'aria-modal',\r\n        ariaMultiLine: 'aria-multiline',\r\n        ariaMultiSelectable: 'aria-multiselectable',\r\n        ariaOrientation: 'aria-orientation',\r\n        ariaPlaceholder: 'aria-placeholder',\r\n        ariaPosInSet: 'aria-posinset',\r\n        ariaPressed: 'aria-pressed',\r\n        ariaReadOnly: 'aria-readonly',\r\n        ariaRelevant: 'aria-relevant',\r\n        ariaRequired: 'aria-required',\r\n        ariaRoleDescription: 'aria-roledescription',\r\n        ariaRowCount: 'aria-rowcount',\r\n        ariaRowIndex: 'aria-rowindex',\r\n        ariaRowSpan: 'aria-rowspan',\r\n        ariaSelected: 'aria-selected',\r\n        ariaSetSize: 'aria-setsize',\r\n        ariaSort: 'aria-sort',\r\n        ariaValueMax: 'aria-valuemax',\r\n        ariaValueMin: 'aria-valuemin',\r\n        ariaValueNow: 'aria-valuenow',\r\n        ariaValueText: 'aria-valuetext',\r\n        role: 'role'\r\n    };\r\n    const initAom = (ref, internals) => {\r\n        for (let key in aom) {\r\n            internals[key] = null;\r\n            let closureValue = null;\r\n            const attributeName = aom[key];\r\n            Object.defineProperty(internals, key, {\r\n                get() {\r\n                    return closureValue;\r\n                },\r\n                set(value) {\r\n                    closureValue = value;\r\n                    if (ref.isConnected) {\r\n                        ref.setAttribute(attributeName, value);\r\n                    }\r\n                    else {\r\n                        upgradeMap.set(ref, internals);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    class ValidityState {\r\n        constructor() {\r\n            this.badInput = false;\r\n            this.customError = false;\r\n            this.patternMismatch = false;\r\n            this.rangeOverflow = false;\r\n            this.rangeUnderflow = false;\r\n            this.stepMismatch = false;\r\n            this.tooLong = false;\r\n            this.tooShort = false;\r\n            this.typeMismatch = false;\r\n            this.valid = true;\r\n            this.valueMissing = false;\r\n            Object.seal(this);\r\n        }\r\n    }\r\n    const setValid = (validityObject) => {\r\n        validityObject.badInput = false;\r\n        validityObject.customError = false;\r\n        validityObject.patternMismatch = false;\r\n        validityObject.rangeOverflow = false;\r\n        validityObject.rangeUnderflow = false;\r\n        validityObject.stepMismatch = false;\r\n        validityObject.tooLong = false;\r\n        validityObject.tooShort = false;\r\n        validityObject.typeMismatch = false;\r\n        validityObject.valid = true;\r\n        validityObject.valueMissing = false;\r\n        return validityObject;\r\n    };\r\n    const reconcileValidity = (validityObject, newState) => {\r\n        validityObject.valid = isValid(newState);\r\n        Object.keys(newState).forEach(key => validityObject[key] = newState[key]);\r\n        return validityObject;\r\n    };\r\n    const isValid = (validityState) => {\r\n        let valid = true;\r\n        for (let key in validityState) {\r\n            if (key !== 'valid' && validityState[key] !== false) {\r\n                valid = false;\r\n            }\r\n        }\r\n        return valid;\r\n    };\r\n\r\n    function observerCallback(mutationList) {\r\n        mutationList.forEach(mutationRecord => {\r\n            const { addedNodes, removedNodes } = mutationRecord;\r\n            const added = Array.from(addedNodes);\r\n            const removed = Array.from(removedNodes);\r\n            added.forEach(node => {\r\n                if (internalsMap.has(node) && node.constructor['formAssociated']) {\r\n                    const internals = internalsMap.get(node);\r\n                    const { form } = internals;\r\n                    initForm(node, form, internals);\r\n                    initLabels(node, internals.labels);\r\n                }\r\n                if (upgradeMap.has(node)) {\r\n                    const internals = upgradeMap.get(node);\r\n                    const aomKeys = Object.keys(aom);\r\n                    aomKeys\r\n                        .filter(key => internals[key] !== null)\r\n                        .forEach(key => {\r\n                        node.setAttribute(aom[key], internals[key]);\r\n                    });\r\n                    upgradeMap.delete(node);\r\n                }\r\n            });\r\n            removed.forEach(node => {\r\n                const internals = internalsMap.get(node);\r\n                if (internals && hiddenInputMap.get(internals)) {\r\n                    removeHiddenInputs(internals);\r\n                }\r\n                if (shadowHostsMap.has(node)) {\r\n                    const observer = shadowHostsMap.get(node);\r\n                    observer.disconnect();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    function fragmentObserverCallback(mutationList) {\r\n        mutationList.forEach(mutation => {\r\n            const { removedNodes } = mutation;\r\n            removedNodes.forEach(node => {\r\n                const observer = documentFragmentMap.get(mutation.target);\r\n                if (internalsMap.has(node)) {\r\n                    upgradeInternals(node);\r\n                }\r\n                observer.disconnect();\r\n            });\r\n        });\r\n    }\r\n    const deferUpgrade = (fragment) => {\r\n        const observer = new MutationObserver(fragmentObserverCallback);\r\n        observer.observe(fragment, { childList: true });\r\n        documentFragmentMap.set(fragment, observer);\r\n    };\r\n    new MutationObserver(observerCallback);\r\n    const observerConfig = {\r\n        childList: true,\r\n        subtree: true\r\n    };\r\n\r\n    const customStateMap = new WeakMap();\r\n    class CustomStateSet extends Set {\r\n        constructor(ref) {\r\n            super();\r\n            if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\r\n                throw new TypeError('Illegal constructor');\r\n            }\r\n            customStateMap.set(this, ref);\r\n        }\r\n        add(state) {\r\n            if (!/^--/.test(state) || typeof state !== 'string') {\r\n                throw new DOMException(`Failed to execute 'add' on 'CustomStateSet': The specified value ${state} must start with '--'.`);\r\n            }\r\n            const result = super.add(state);\r\n            const ref = customStateMap.get(this);\r\n            ref.toggleAttribute(`state${state}`, true);\r\n            if (ref.part) {\r\n                ref.part.add(`state--${state}`);\r\n            }\r\n            return result;\r\n        }\r\n        clear() {\r\n            for (let [entry] of this.entries()) {\r\n                this.delete(entry);\r\n            }\r\n            super.clear();\r\n        }\r\n        delete(state) {\r\n            const result = super.delete(state);\r\n            const ref = customStateMap.get(this);\r\n            ref.toggleAttribute(`state${state}`, false);\r\n            if (ref.part) {\r\n                ref.part.remove(`state--${state}`);\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    class ElementInternals {\r\n        constructor(ref) {\r\n            if (!ref || !ref.tagName || ref.tagName.indexOf('-') === -1) {\r\n                throw new TypeError('Illegal constructor');\r\n            }\r\n            const rootNode = ref.getRootNode();\r\n            const validity = new ValidityState();\r\n            this.states = new CustomStateSet(ref);\r\n            refMap.set(this, ref);\r\n            validityMap.set(this, validity);\r\n            internalsMap.set(ref, this);\r\n            initAom(ref, this);\r\n            initRef(ref, this);\r\n            Object.seal(this);\r\n            upgradeInternals(ref);\r\n            if (rootNode instanceof DocumentFragment) {\r\n                deferUpgrade(rootNode);\r\n            }\r\n        }\r\n        static get isPolyfilled() {\r\n            return true;\r\n        }\r\n        checkValidity() {\r\n            const ref = refMap.get(this);\r\n            throwIfNotFormAssociated(ref, `Failed to execute 'checkValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\r\n            const validity = validityMap.get(this);\r\n            if (!validity.valid) {\r\n                const validityEvent = new Event('invalid', {\r\n                    bubbles: false,\r\n                    cancelable: true,\r\n                    composed: false\r\n                });\r\n                ref.dispatchEvent(validityEvent);\r\n            }\r\n            return validity.valid;\r\n        }\r\n        get form() {\r\n            const ref = refMap.get(this);\r\n            throwIfNotFormAssociated(ref, `Failed to read the 'form' property from 'ElementInternals': The target element is not a form-associated custom element.`);\r\n            let form;\r\n            if (ref.constructor['formAssociated'] === true) {\r\n                form = findParentForm(ref);\r\n            }\r\n            return form;\r\n        }\r\n        get labels() {\r\n            const ref = refMap.get(this);\r\n            throwIfNotFormAssociated(ref, `Failed to read the 'labels' property from 'ElementInternals': The target element is not a form-associated custom element.`);\r\n            const id = ref.getAttribute('id');\r\n            const hostRoot = ref.getRootNode();\r\n            if (hostRoot && id) {\r\n                return hostRoot ? hostRoot.querySelectorAll(`[for='${id}']`) : []; //***\r\n            }\r\n            return [];\r\n        }\r\n        reportValidity() {\r\n            const ref = refMap.get(this);\r\n            throwIfNotFormAssociated(ref, `Failed to execute 'reportValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\r\n            const valid = this.checkValidity();\r\n            const anchor = validationAnchorMap.get(this);\r\n            if (anchor && !ref.constructor['formAssociated']) {\r\n                throw new DOMException(`Failed to execute 'setValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\r\n            }\r\n            if (!valid && anchor) {\r\n                ref.focus();\r\n                anchor.focus();\r\n            }\r\n            return valid;\r\n        }\r\n        setFormValue(value) {\r\n            const ref = refMap.get(this);\r\n            throwIfNotFormAssociated(ref, `Failed to execute 'setFormValue' on 'ElementInternals': The target element is not a form-associated custom element.`);\r\n            removeHiddenInputs(this);\r\n            if (value != null && !(value instanceof FormData)) {\r\n                if (ref.getAttribute('name')) {\r\n                    const hiddenInput = createHiddenInput(ref, this);\r\n                    hiddenInput.value = value;\r\n                }\r\n            }\r\n            else if (value != null && value instanceof FormData) {\r\n                value.forEach((formDataValue, formDataKey) => {\r\n                    if (typeof formDataValue === 'string') {\r\n                        const hiddenInput = createHiddenInput(ref, this);\r\n                        hiddenInput.name = formDataKey;\r\n                        hiddenInput.value = formDataValue;\r\n                    }\r\n                });\r\n            }\r\n            refValueMap.set(ref, value);\r\n        }\r\n        setValidity(validityChanges, validationMessage, anchor) {\r\n            const ref = refMap.get(this);\r\n            throwIfNotFormAssociated(ref, `Failed to execute 'setValidity' on 'ElementInternals': The target element is not a form-associated custom element.`);\r\n            if (!validityChanges) {\r\n                throw new TypeError('Failed to execute \\'setValidity\\' on \\'ElementInternals\\': 1 argument required, but only 0 present.');\r\n            }\r\n            validationAnchorMap.set(this, anchor);\r\n            const validity = validityMap.get(this);\r\n            const validityChangesObj = {};\r\n            for (const key in validityChanges) {\r\n                validityChangesObj[key] = validityChanges[key];\r\n            }\r\n            if (Object.keys(validityChangesObj).length === 0) {\r\n                setValid(validity);\r\n            }\r\n            const check = { ...validity, ...validityChangesObj };\r\n            delete check.valid;\r\n            const { valid } = reconcileValidity(validity, check);\r\n            if (!valid && !validationMessage) {\r\n                throw new DOMException(`Failed to execute 'setValidity' on 'ElementInternals': The second argument should not be empty if one or more flags in the first argument are true.`);\r\n            }\r\n            validationMessageMap.set(this, valid ? '' : validationMessage);\r\n            ref.toggleAttribute('internals-invalid', !valid);\r\n            ref.toggleAttribute('internals-valid', valid);\r\n            ref.setAttribute('aria-invalid', `${!valid}`);\r\n        }\r\n        get shadowRoot() {\r\n            const ref = refMap.get(this);\r\n            const shadowRoot = shadowRootMap.get(ref);\r\n            if (shadowRoot) {\r\n                return shadowRoot;\r\n            }\r\n            return null;\r\n        }\r\n        get validationMessage() {\r\n            const ref = refMap.get(this);\r\n            throwIfNotFormAssociated(ref, `Failed to read the 'validationMessage' property from 'ElementInternals': The target element is not a form-associated custom element.`);\r\n            return validationMessageMap.get(this);\r\n        }\r\n        get validity() {\r\n            const ref = refMap.get(this);\r\n            throwIfNotFormAssociated(ref, `Failed to read the 'validity' property from 'ElementInternals': The target element is not a form-associated custom element.`);\r\n            const validity = validityMap.get(this);\r\n            return validity;\r\n        }\r\n        get willValidate() {\r\n            const ref = refMap.get(this);\r\n            throwIfNotFormAssociated(ref, `Failed to read the 'willValidate' property from 'ElementInternals': The target element is not a form-associated custom element.`);\r\n            if (ref.disabled || ref.hasAttribute('disabled')) {\r\n                return false;\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    if (!window.CustomStateSet) {\r\n        window.CustomStateSet = CustomStateSet;\r\n    }\r\n    function isElementInternalsSupported() {\r\n        if (!window.ElementInternals) {\r\n            return false;\r\n        }\r\n        class ElementInternalsFeatureDetection extends HTMLElement {\r\n            constructor() {\r\n                super();\r\n                this.internals = this.attachInternals();\r\n            }\r\n        }\r\n        const randomName = `element-internals-feature-detection-${Math.random().toString(36).replace(/[^a-z]+/g, '')}`;\r\n        customElements.define(randomName, ElementInternalsFeatureDetection);\r\n        const featureDetectionElement = new ElementInternalsFeatureDetection();\r\n        return [\r\n            \"shadowRoot\",\r\n            \"form\",\r\n            \"states\",\r\n            \"willValidate\",\r\n            \"validity\",\r\n            \"validationMessage\",\r\n            \"labels\",\r\n            \"setFormValue\",\r\n            \"setValidity\",\r\n            \"checkValidity\",\r\n            \"reportValidity\"\r\n        ].every(prop => prop in featureDetectionElement.internals);\r\n    }\r\n    if (!isElementInternalsSupported()) {\r\n        window.ElementInternals = ElementInternals;\r\n        function attachShadowObserver(...args) {\r\n            const shadowRoot = attachShadow.apply(this, args);\r\n            const observer = new MutationObserver(observerCallback);\r\n            shadowRootMap.set(this, shadowRoot);\r\n            observer.observe(shadowRoot, observerConfig);\r\n            shadowHostsMap.set(this, observer);\r\n            return shadowRoot;\r\n        }\r\n        function checkValidityOverride(...args) {\r\n            let returnValue = checkValidity.apply(this, args);\r\n            return overrideFormMethod(this, returnValue, 'checkValidity');\r\n        }\r\n        function reportValidityOverride(...args) {\r\n            let returnValue = reportValidity.apply(this, args);\r\n            return overrideFormMethod(this, returnValue, 'reportValidity');\r\n        }\r\n        HTMLElement.prototype.attachInternals = function () {\r\n            if (this.tagName.indexOf('-') === -1) {\r\n                throw new Error(`Failed to execute 'attachInternals' on 'HTMLElement': Unable to attach ElementInternals to non-custom elements.`);\r\n            }\r\n            if (internalsMap.has(this)) {\r\n                throw new DOMException(`DOMException: Failed to execute 'attachInternals' on 'HTMLElement': ElementInternals for the specified element was already attached.`);\r\n            }\r\n            return new ElementInternals(this);\r\n        };\r\n        const attachShadow = Element.prototype.attachShadow;\r\n        Element.prototype.attachShadow = attachShadowObserver;\r\n        const documentObserver = new MutationObserver(observerCallback);\r\n        documentObserver.observe(document.documentElement, observerConfig);\r\n        const checkValidity = HTMLFormElement.prototype.checkValidity;\r\n        HTMLFormElement.prototype.checkValidity = checkValidityOverride;\r\n        const reportValidity = HTMLFormElement.prototype.reportValidity;\r\n        HTMLFormElement.prototype.reportValidity = reportValidityOverride;\r\n    }\r\n\r\n}());\r\n"]}